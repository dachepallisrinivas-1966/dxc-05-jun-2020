D.Srinivas | dachepallisrinivas@gmail.com | 6305730633
Anirban | anirban.santra@dxc.com | 7602461368


Oracle 
------
Oracle is an RDBMS (Relational Database Management System)

Database
    repository of data
Database Objects
    table, views, indexes, synonyms, sequences etc.,
Database Management 
    Collection of tools that are used to manage the Database.

data            : collection of raw facts
data processing : inserting/deleting/modifying/sorting
information     : output of data processing

6 subjects - individual subject marks are given to class teacher     (data)
progress report - individual subject marks, total marks, grade, rank (information)

account statments (information) which is madeup of transactions (data)

Oracle 5            MS-DOS Based    
Oracle 6            MS-DOS Based

Oracle 7, 7.1, 8
Oracle 8i           (i stands for )

Oracle 9i           widely used

Oracle 10g          Express Editions  (free - learners / trainers / colleges)
Oracle 11g      -   g for grid computing

Oracle 12c

What is the latest version ?        Oracle 18c      (c stands for cloud computing)
    expression edition 

www.oracle.com          (free download for express editions)

user name & password
user name: sys
password : .....



default user names:  (admin accounts)
system
sys

Database users:
---------------
1) End users  (Naive Users)
2) Developers
3) Adminstrators - installing, creating and managing user accounts, managing databases

from oracle 10g, they offer one special account 
user name : hr
password : hr

1) first connect as system or sys.
2) then use the following steps:

sql> alter user hr account unlock;
account unlocked

sql> alter user hr identified by hr;
user altered

sql> connect
user name : hr
password : hr

sql> show user
user is "hr"


In order to talk to a database, we need SQL (Structured Query Language)
sequel is the initial name for SQL.

Various RDBMS products:
-----------------------
1) Oracle
2) MS SQL Server
3) MySQL
4) SQLite
5) PostGre SQL

SQL Commands are classified as ...
1) DDL  (data definition language) commands     [CREATE | RENAME | ALTER | TRUNCATE | DROP]
2) DML  (data manipulation)                     [INSERT | UPDATE | DELETE]
3) DCL  (data control)                          [GRANT | REVOKE]
4) DQL / DRL  (data query / data retrieval)     [SELECT]
5) TCL  (Transaction control)                   [COMMIT | ROLLBACK | SAVEPOINT]

1) SQL is Case InSensitive Language.
2) Clauses must be given in different lines.
3) table names are plural.
4) SQL command must be terminated by a semi-colon(;)


SQL Data types:
----------------
1) CHAR([w])    : to store fixed-length values, whose width can be 2000 characters.
                  default width 1.  (spaces are embedded)
2) VARCHAR(w)   : to store varying-length values, whose width can be 4000 characters.
   VARCHAR2(w)

   till oracle 6 version, it was called as VARCHAR.
   later on oracle calling it as VARCHAR2
3) NUMBER(w [,s])   numeric values upto width 'w' and scale 's'.
4) DATE         : to store data values within range Jan 1 st 4712 B.C. to 31 st Dec 9999 A.D.
                  default date format is dd-mon-yyyy   (eg: 05-jun-2020)

5) LONG         : to store large amount of data upto 2GB.
                  only one LONG column is allowed per table.
6) RAW          : to store binary data such as images, pictures upto 2000 bytes.
7) LONG RAW     : LONG + RAW



creating a table:
-----------------
CREATE   TABLE   tablename
(column_name    datatype,
 column_name    datatype,
 .....
)

emps (empno, ename, doj, salary)

CREATE  TABLE emps
(empno   number(4),
 ename   varchar2(20),
 doj     date,
 salary  number(7,2)
 );

how to diplay all your tables?
-------------------------------
SELECT tname
FROM   tab;

(or)

SELECT  table_name
FROM    user_tables;

how to display the structure of the table?
--------------------------------------------
structure - column name and other details.


Oracle however offer SQL commands.
Apart from that, Oracle created some extra commands, known as SQL*Plus Commands.

DESCRIBE is SQL*Plus commands and hence it do not need semi-colon terminator.
it can be abbreviated.

DESCRIBE   emps
(or)
DESC   emps

INSERT: 
1) to add new rows.
2) character and date literals must be enclosed within single quotes.

syntax:
-------
INSERT   INTO  tablename  [ (col-1, col-2, ...) ]
VALUES   (value-1, value-2, ....);

INSERT INTO emps
VALUES (101, 'srinivas', '15-sep-2001', 30000 );

INSERT INTO emps (empno, ename, doj)
VALUES (102, 'prabha' , '16-sep-2001');

INSERT INTO emps 
VALUES (104, 'surya', null, 14000);

INSERT INTO emps (empno, doj, salary, ename)
VALUES (105, '10-oct-2002', 15200, 'sudha');


SELECT:
-------
to retrieve data 

SELECT  *
FROM   emps;

UPDATE:
--------
TO MODIFY ROWS.

UPDATE   tablename
SET  col-1 = value-1  [, col-2 = value-2 ,....]
[WHERE  condition];

UPDATE   emps
SET  salary = 12300
WHERE  empno = 102;

UPDATE   emps
SET  doj = '5-nov-2001'
WHERE  ename = 'surya';

increase the salary of all employees by 10% of their salary.

UPDATE  emps
SET  salary = salary + (salary * 10 / 100);


DELETE:
-------
to delete rows.

DELETE  FROM  tablename
[WHERE   condition];

DELETE  FROM  emps
WHERE  empno = 101;

DELETE  FROM  emps;

TRUNCATE  TABLE:
-----------------
to delete all rows from the table 

TRUNCATE  TABLE  emps;

DROP TABLE:
-----------
DROP TABLE emps;


                    INTEGRITY CONSTRAINTS
                    ----------------------
These are conditions given for a column (or) combination of columns.
During DML operations, if we violate any of these rules, oracle server generate error message.

constraint:
----------------------
1) NOT NULL
2) UNIQUE
3) PRIMARY KEY
4) FOREIGN KEY   (REFERENCES)
5) CHECK  (condition)

constraint options:
---------------------
  do not allow constraint names.

1) DEFAULT
2) ENABLE / DISABLE
3) ON DELETE CASCADE   (specified in conjunction with REFERENCES)

primary key:   (not null && unique)
-----------------------------------------
1) is used to identify uniquely each row
2) a table can have only one primary key
3) null values are not allowed
4) duplicate values are not allowed
5) it is a single column or combination of columns
5) for every primary key, a unique is index is generated automatically. 
   this index is used by "Query Optimizer" whenever a predicate clause is used while querying.

foreign key :
----------------------------------------
1) used to establish a relation between parent (master | independent) and child tables (dependent)
2) it always present in child table
3) it is a column or combination of columns   
4) null values are allowed
5) duplicates are also allowed.
6) every foreign key must be defined as primary key or unique key in it's parent table.
7) a table can have many foreign key



alternate key:
---------------

complex key:   (composite key)
----------------------------------
if any constraint is given for combination of columns then such combination is called complex key.



                            ORDER PROCESSING SYSTEM
                            -----------------------
customers
    custno          n(3)    pk
    custname        v(20)   nn
    address         v(150)
    phone           v(15)

items
    itemno          n(3)    pk
    itemname        v(20)   nn
    unitprice       n(7,2)  it should be non-zero and non-negative
    opstock         n(4)    

  ITEMNO ITEMNAME              UNITPRICE    OPSTOCK
---------- -------------------- ---------- ----------
       901 mouse                       100          0
       902 webcam                      800          0
       903 ram                        1200          0
orders
    orderno         n(3)    pk
    custno          n(3)    fk    
    orderdate       d       default should taken as system date
    ordervalue      n(7,2)  it shoule be non-zero and non-negative

  ORDERNO     CUSTNO ORDERDATE ORDERVALUE
---------- ---------- --------- ----------
         1        101 05-JUN-20     0
         2        101 30-MAY-20     0
         3            05-JUN-20     0

orderdetails
    orderno     n(3)     fk                                         
    itemno      n(3)     fk
    qty         n(3)    non-zero and non-negative
    (orderno + itemno)   pk

ORDERNO    ITEMNO    QTY
---------- ---------- --------- 
    1       901         3                   
    1       902         5
    1       903         2


    2       901         1
    2       902         5

    3       901         10


INSERT INTO orderdetails
VALUES (1, 901, 3);

INSERT INTO orderdetails
VALUES (1, 902, 5);

INSERT INTO orderdetails
VALUES (1, 903, 2);



CREATE  TABLE  customers
(custno   number(3)    CONSTRAINT  customers_custno_pk   primary  key,
 custname varchar2(20) CONSTRAINT  customers_custname_nn  not null,
 address  varchar2(150),
 phone    varchar2(15)
);

 INSERT  INTO  customers
 VALUES (101, 'abc corp', 'chennai', '1234567');

 INSERT  INTO  customers
 VALUES (102, 'amrutha corp', 'pune', '1234567');

CREATE TABLE items
(itemno number(3) CONSTRAINT items_itemno_pk primary key,
itemname varchar(20) CONSTRAINT items_itemname_nn not null,
unitprice number(7,2) CONSTRAINT items_unitprice_ch check(unitprice > 0),
opstock number(4)
);

INSERT  INTO  items
VALUES (901, 'mouse', 100, 0);

INSERT  INTO  items
VALUES (902, 'webcam', 800, 0);

INSERT  INTO  items
VALUES (903, 'ram', 1200, 0);

 

Normalization:  (database design)
----------------------------------
is all about spliting a table into smaller multiple tables.

1NF   : multi-valued columns are not allowed and should have primary key
2NF   : 1NF && functional dependency
3NF   : 2NF && not transitive dependency


CREATE  TABLE  orders
(orderno   number(3)  CONSTRAINT  orders_orderno_pk  PRIMARY KEY,
 custno    number(3)  CONSTRAINT  orders_custno_fk   REFERENCES  customers(custno),
 orderdate date                                      DEFAULT   SYSDATE,
 ordervalue number(7,2)  CONSTRAINT orders_ordervalue_chk  CHECK (ordervalue >= 0)
);

INSERT  INTO  orders (orderno, custno, ordervalue)
VALUES (1, 101, 0);

INSERT  INTO  orders 
VALUES (2, 101, '30-may-20' , 0);

INSERT  INTO  orders (orderno, ordervalue)
VALUES (3, 0);


CREATE  TABLE  orderdetails
(orderno  number(3) CONSTRAINT  orderdetails_orderno_fk  REFERENCES  orders(orderno),
 itemno   number(3) CONSTRAINT  orderdetails_itemno_fk   REFERENCES  items(itemno),
 qty      number(3) CONSTRAINT  orderdetails_qty_chk     CHECK (qty > 0),
 CONSTRAINT  orderdetails_orderno_itemno_pk   PRIMARY KEY(orderno, itemno)
);



constraints can be defined in TWO ways.
1) column level constraint specification:
        is used only when we want to give constraints for a single column
2) table level constraint specification:
        is used to give constraints for a single column or combination of columns.


Note:
-----
1) we cannot delete row from a parent table when we have corresponding rows in the child table.


CREATE  TABLE  DEPTS
(deptno  number(3) CONSTRAINT  depts_deptno_pk  PRIMARY KEY,
 dname   varchar2(20)
);

INSERT  INTO  DEPTS
VALUES (1, 'SALES');

INSERT INTO DEPTS
VALUES (2, 'ACCOUNTS');

CREATE  TABLE  EMPS
(empno   number(3)  CONSTRAINT  emps_empno_pk  PRIMARY KEY,
 ename   varchar2(10),
 deptno  number(3) CONSTRAINT  emps_deptno_fk REFERENCES depts(deptno)  ON DELETE CASCADE
);

INSERT INTO EMPS
VALUES (100, 'KUMAR', 1);

INSERT INTO EMPS
VALUES (101, 'RAGHU', 1);

INSERT INTO EMPS
VALUES (103, 'KIRAN', 2);

INSERT INTO EMPS
VALUES (104, 'SRINU', 1);


DELETE FROM DEPTS
WHERE deptno = 1;


how do you see various constraints given on a table?
----------------------------------------------------
SELECT  constraint_type, constraint_name
FROM    user_constraints
WHERE   table_name = 'orderdetails';

meta data (data directory | data dictionary):
-----------------------------------------------
data about data
eg: user_constraints, user_tables

ALTER   TABLE:
===============
to modify the structure of the table.
WE CAN ADD
    new columns
    new constraints
WE CAN REMOVE
    existing columns
    existing constraints
WE CAN MODIFY
    column types, size

syntax:
-------
ALTER   TABLE  tablename
[ADD | MODIFY | DROP]   column specification   [ENABLE | DISABLE]


CREATE  TABLE  emp2
(empno  number(2),
 ename  varchar2(4)
);

INSERT  INTO  emp2
VALUES (10, 'ravi');

INSERT  INTO  emp2
VALUES (15, 'ramu');

ALTER  TABLE  emp2
ADD  (desg  varchar2(10), salary number(7,2), deptno  number(3));

ALTER  TABLE  emp2
MODIFY  (ename  varchar2(6));

INSERT  INTO  emp2 (empno, ename)
VALUES (12, 'sundar');

ALTER  TABLE  emp2
MODIFY  (ename  varchar2(5));

ALTER  TABLE  emp2
DROP  COLUMN deptno;

ALTER  TABLE  emp2
DROP  (desg, salary);

ALTER  TABLE  emp2
ADD  CONSTRAINT  emp2_empno_pk PRIMARY KEY(empno);

ALTER  TABLE  emp2
ADD (salary  number(7,2) CONSTRAINT  emp2_salary_chk  CHECK(salary >= 10000));

ALTER  TABLE emp2
DROP  PRIMARY KEY;
(or)
ALTER  TABLE  emp2
DROP  CONSTRAINT emp2_empno_pk;

ALTER  TABLE  emp2
DROP  CONSTRAINT emp2_salary_chk;





































































user name : sys as sysdba
password : ....

















